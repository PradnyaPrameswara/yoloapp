{"ast":null,"code":"var _jsxFileName = \"C:\\\\Gemastik\\\\yoloapp\\\\yoloapp\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [token, setToken] = useState(localStorage.getItem('token') || null);\n\n  // Check if user is logged in on component mount\n  useEffect(() => {\n    const verifyToken = async () => {\n      if (!token) {\n        setCurrentUser(null);\n        setLoading(false);\n        return;\n      }\n\n      // Check if token has expired\n      const tokenExpiry = localStorage.getItem('tokenExpiry');\n      if (tokenExpiry && new Date().getTime() > parseInt(tokenExpiry)) {\n        console.log('Token has expired');\n        logout();\n        setLoading(false);\n        return;\n      }\n      try {\n        // Verify token with backend\n        const response = await fetch('http://localhost:8001/api/auth/me', {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        if (response.ok) {\n          const userData = await response.json();\n          setCurrentUser(userData);\n        } else {\n          // If token is invalid, logout\n          console.log('Invalid token response:', response.status);\n          logout();\n        }\n      } catch (error) {\n        console.error('Error verifying token:', error);\n        logout();\n      }\n      setLoading(false);\n    };\n    verifyToken();\n  }, [token]);\n\n  // Register function\n  const register = async (username, email, password) => {\n    try {\n      // Basic validation\n      if (!username || username.length < 3) {\n        throw new Error('Username must be at least 3 characters');\n      }\n      if (!email || !email.includes('@')) {\n        throw new Error('Please enter a valid email address');\n      }\n      if (!password || password.length < 6) {\n        throw new Error('Password must be at least 6 characters');\n      }\n      const response = await fetch('http://localhost:8001/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.detail || 'Registration failed');\n      }\n\n      // Return success but don't login automatically\n      return {\n        success: true,\n        message: 'Registration successful! You can now log in.'\n      };\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  };\n\n  // Login function\n  const login = async (username, password) => {\n    try {\n      // FormData is required for OAuth2 password flow\n      const formData = new URLSearchParams();\n      formData.append('username', username);\n      formData.append('password', password);\n      const response = await fetch('http://localhost:8001/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: formData\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Login failed');\n      }\n      const data = await response.json();\n      const {\n        access_token\n      } = data;\n      if (!access_token) {\n        throw new Error('No access token received');\n      }\n\n      // Store token in local storage with expiration timestamp (1 hour)\n      const expiresAt = new Date().getTime() + 60 * 60 * 1000;\n      localStorage.setItem('token', access_token);\n      localStorage.setItem('tokenExpiry', expiresAt.toString());\n      setToken(access_token);\n\n      // Fetch user data\n      const userResponse = await fetch('http://localhost:8001/api/auth/me', {\n        headers: {\n          'Authorization': `Bearer ${access_token}`\n        }\n      });\n      if (userResponse.ok) {\n        const userData = await userResponse.json();\n        setCurrentUser(userData);\n        return {\n          success: true,\n          user: userData\n        };\n      } else {\n        throw new Error('Failed to fetch user data');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    localStorage.removeItem('token');\n    setToken(null);\n    setCurrentUser(null);\n  };\n  const value = {\n    currentUser,\n    loading,\n    register,\n    login,\n    logout,\n    isAuthenticated: !!currentUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 10\n  }, this);\n};\n_s(AuthProvider, \"NiZ2j9O3cWWnQ3aEm8kDt6I2MmQ=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","currentUser","setCurrentUser","loading","setLoading","token","setToken","localStorage","getItem","verifyToken","tokenExpiry","Date","getTime","parseInt","console","log","logout","response","fetch","method","headers","ok","userData","json","status","error","register","username","email","password","length","Error","includes","body","JSON","stringify","data","detail","success","message","login","formData","URLSearchParams","append","errorData","access_token","expiresAt","setItem","toString","userResponse","user","removeItem","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Gemastik/yoloapp/yoloapp/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [token, setToken] = useState(localStorage.getItem('token') || null);\r\n\r\n  // Check if user is logged in on component mount\r\n  useEffect(() => {\r\n    const verifyToken = async () => {\r\n      if (!token) {\r\n        setCurrentUser(null);\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      // Check if token has expired\r\n      const tokenExpiry = localStorage.getItem('tokenExpiry');\r\n      if (tokenExpiry && new Date().getTime() > parseInt(tokenExpiry)) {\r\n        console.log('Token has expired');\r\n        logout();\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // Verify token with backend\r\n        const response = await fetch('http://localhost:8001/api/auth/me', {\r\n          method: 'GET',\r\n          headers: {\r\n            'Authorization': `Bearer ${token}`\r\n          }\r\n        });\r\n\r\n        if (response.ok) {\r\n          const userData = await response.json();\r\n          setCurrentUser(userData);\r\n        } else {\r\n          // If token is invalid, logout\r\n          console.log('Invalid token response:', response.status);\r\n          logout();\r\n        }\r\n      } catch (error) {\r\n        console.error('Error verifying token:', error);\r\n        logout();\r\n      }\r\n\r\n      setLoading(false);\r\n    };\r\n\r\n    verifyToken();\r\n  }, [token]);\r\n\r\n  // Register function\r\n  const register = async (username, email, password) => {\r\n    try {\r\n      // Basic validation\r\n      if (!username || username.length < 3) {\r\n        throw new Error('Username must be at least 3 characters');\r\n      }\r\n      \r\n      if (!email || !email.includes('@')) {\r\n        throw new Error('Please enter a valid email address');\r\n      }\r\n      \r\n      if (!password || password.length < 6) {\r\n        throw new Error('Password must be at least 6 characters');\r\n      }\r\n      \r\n      const response = await fetch('http://localhost:8001/api/auth/register', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ username, email, password }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(data.detail || 'Registration failed');\r\n      }\r\n\r\n      // Return success but don't login automatically\r\n      return { \r\n        success: true,\r\n        message: 'Registration successful! You can now log in.' \r\n      };\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Login function\r\n  const login = async (username, password) => {\r\n    try {\r\n      // FormData is required for OAuth2 password flow\r\n      const formData = new URLSearchParams();\r\n      formData.append('username', username);\r\n      formData.append('password', password);\r\n\r\n      const response = await fetch('http://localhost:8001/api/auth/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        body: formData,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || 'Login failed');\r\n      }\r\n\r\n      const data = await response.json();\r\n      const { access_token } = data;\r\n\r\n      if (!access_token) {\r\n        throw new Error('No access token received');\r\n      }\r\n\r\n      // Store token in local storage with expiration timestamp (1 hour)\r\n      const expiresAt = new Date().getTime() + 60 * 60 * 1000;\r\n      localStorage.setItem('token', access_token);\r\n      localStorage.setItem('tokenExpiry', expiresAt.toString());\r\n      setToken(access_token);\r\n\r\n      // Fetch user data\r\n      const userResponse = await fetch('http://localhost:8001/api/auth/me', {\r\n        headers: {\r\n          'Authorization': `Bearer ${access_token}`,\r\n        },\r\n      });\r\n\r\n      if (userResponse.ok) {\r\n        const userData = await userResponse.json();\r\n        setCurrentUser(userData);\r\n        return { success: true, user: userData };\r\n      } else {\r\n        throw new Error('Failed to fetch user data');\r\n      }\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    setToken(null);\r\n    setCurrentUser(null);\r\n  };\r\n\r\n  const value = {\r\n    currentUser,\r\n    loading,\r\n    register,\r\n    login,\r\n    logout,\r\n    isAuthenticated: !!currentUser,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n\r\nexport default AuthContext;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}